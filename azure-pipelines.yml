trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: terraform-backend
  - group: vm-secrets
  - name: environment
    value: 'dev'
  - name: terraformVersion
    value: '1.6.6'

stages:
  - stage: Terraform
    jobs:
      - job: TerraformPlan
        displayName: 'Terraform Plan'
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: $(terraformVersion)

          - script: |
              echo "vm_admin_username = \"$(vm-admin-username)\"" > environments/$(environment)/terraform.tfvars
              echo "vm_admin_password = \"$(vm-admin-password)\"" >> environments/$(environment)/terraform.tfvars
            displayName: 'Create terraform.tfvars with VM admin credentials'
            workingDirectory: $(System.DefaultWorkingDirectory)

          - task: TerraformTaskV4@4
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'azure-connection'
              backendAzureRmResourceGroupName: '$(ARM_RESOURCE_GROUP_NAME)'
              backendAzureRmStorageAccountName: '$(ARM_STORAGE_ACCOUNT_NAME)'
              backendAzureRmContainerName: '$(ARM_CONTAINER_NAME)'
              backendAzureRmKey: '$(ARM_KEY)'
              workingDirectory: 'environments/$(environment)'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: 'environments/$(environment)'

          - task: TerraformTaskV4@4
            displayName: 'Terraform Plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: 'environments/$(environment)'
              environmentServiceNameAzureRM: 'azure-connection'

      - deployment: TerraformApply
        displayName: 'Terraform Apply'
        dependsOn: TerraformPlan
        environment: dev  # This enables manual approval if configured in Azure DevOps
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
        steps:
          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: 'environments/$(environment)'
              environmentServiceNameAzureRM: 'azure-connection'
